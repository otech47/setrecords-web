@import "variables.less";
@import "colors.less";

// complementary color scheme
@base: #663333;
@complement1: spin(@base, 180);
@complement2: darken(spin(@base, 180), 5%);
@lighten1: lighten(@base, 15%);
@lighten2: lighten(@base, 30%);

.active(@color, @multiplier: 0.8) {
    color: @color;
    &:active {
        color: @color*@multiplier;
    }
}
.active-bg(@color, @multiplier: 0.8) {
        background-color: @color;
    &:active {
        background-color: @color*@multiplier;
    }
}
.animation(@time: 1s, @delay: 0s,) {
    animation-duration: @time!important;
    animation-delay: @delay!important;
}
.background(@color, @textColor) {
    background-color:@color;
    color:@textColor;
}
.click-blue {
    cursor:pointer;
    .transition(0.1s, ease-in, color);
    &:hover {
        color: @blue;
    }
}
.blur {
    background-size: cover;
    left: -25px;
    right: -25px;
    top: -25px;
    bottom: -25px;
}
.border-radius(@radius) {
  -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    border-radius: @radius;
}
.bottom {
    align-self: flex-end;
}
.top {
    align-self: flex-start;
}
.left {
    justify-content: flex-start;
}
.right {
    justify-content: flex-end;
}
.center-main {
    justify-content: center;
}
.center-cross {
    align-self: center;
}
.box-shadow (@x, @y, @blur: 0px, @color) {
    -webkit-box-shadow: @x @y @blur @color;
    -moz-box-shadow: @x @y @blur @color;
    box-shadow: @x @y @blur @color;
}
.buffer {
  .flex(1,1,auto)!important;
}
.buffer-2x {
    .flex(2,1,auto)!important;
}
.buffer-3x {
    .flex(3,1,auto)!important;
}
.buffer-4x {
    .flex(4,1,auto)!important;
}
.buffer-5x {
    .flex(5,1,auto)!important;
}
.buffer-6x {
    .flex(6,1,auto)!important;
}
.buffer-lg {
    .flex(10,1,auto)!important;
}
.card(@level: 1) {
    & when (@level = 1) {
        box-shadow: 0 1px 4px 0 rgba(49, 53, 66, 0.37);
    }
    & when (@level = 2) {
        box-shadow: 0 6px 10px 0 rgba(49, 53, 66, 0.3), 0 2px 2px 0 rgba(49, 53, 66, 0.2);
    }
    & when (@level = 3) {
        box-shadow: 0 13px 25px 0 rgba(49, 53, 66, 0.3), 0 11px 7px 0 rgba(0, 0, 0, 0.19);
    }
    & when (@level = 4) {
        box-shadow: 0 20px 40px 0 rgba(49, 53, 66, 0.3), 0 14px 12px 0 rgba(49, 53, 66, 0.17);
    }
    & when (@level = 5) {
        box-shadow: 0 27px 55px 0 rgba(49, 53, 66, 0.3), 0 17px 17px 0 rgba(49, 53, 66, 0.15);
    }
}
.center {
    margin:auto;
}
.click {
    cursor:pointer;
    .transition(0.1s, ease-in, color);
    &:hover {
        color: @light-gray;
    }
}
.createBlur(@image, @length) {
    filter: blur(@length);
    -webkit-filter: blur(@length);
    background: @image;
    position: absolute;
}
.createDivider(@width, @height:initial, @color) {
    height: @height;
    width: @width;
    background-color: @color;
}
.createOverlay(@opacity, @color: @dark-gray) {
    z-index: 1;
    &::before {
        content: '';
        opacity: @opacity;
        background-color: @color;
        height: 100%;
        width: 100%;
        position: absolute;
        z-index: -1;
    }
}
.large(@rules, @min-value: 1200px) {
    @media (min-width: @min-value) {@rules();}
}
.medium(@rules, @min-value: 768px) {
    @media (min-width: @min-value) {@rules();}
}
.mobile(@rules, @max-value: 768px) {
    @media (max-width: @max-value) {@rules();}
}
.fadeBackground(@color:@setmine-royal-blue, @alpha:100%) {
    background-color: fade(@color, @alpha);
}
.set-flex {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}
.flex-container {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}
.flexContainer(@direction:row, @oldDirection:horizontal, @wrap:nowrap) {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-box-orient:@oldDirection;
    -moz-box-orient:@oldDirection;
    -ms-box-orient:@oldDirection;
    -webkit-flex-direction:@direction;
    flex-direction:@direction;
    webkit-flex-flow: @direction @wrap;
    -moz-flex-flow: @direction @wrap;
    -ms-flex-flow: @direction @wrap;
    flex-flow: @direction @wrap;
    flex-wrap: @wrap;
    -webkit-flex-wrap: @wrap;
    -moz-flex-wrap: @wrap;
    -ms-flex-wrap: @wrap;
}
.flex(@flexGrow:1, @flexShrink: 1, @flexBasis: auto) {
    -webkit-box-flex: @flexGrow @flexShrink @flexBasis;
    -moz-box-flex: @flexGrow @flexShrink @flexBasis;
    -webkit-flex: @flexGrow @flexShrink @flexBasis;
    -ms-flex: @flexGrow @flexShrink @flexBasis;
    flex: @flexGrow @flexShrink @flexBasis;
}
.flex-column {
  .flexContainer(column, vertical, nowrap);
}
.flex-row {
  .flexContainer(row, horizontal, wrap);
}
.flex-zero {
  .flex(0,1,auto)!important;
}
.flex {
  .flex(1,1,auto)!important;
}
.flex-2x {
  .flex(2,1,auto)!important;
}
.flex-3x {
  .flex(3,1,auto)!important;
}
.flex-4x {
  .flex(4,1,auto)!important;
}
.flex-5x {
  .flex(5,1,auto)!important;
}
.flex-6x {
  .flex(6,1,auto)!important;
}
.flex-7x {
  .flex(7,1,auto)!important;
}
.flex-lg {
  .flex(10,1,auto)!important;
}
.flex-fixed {
  .flex(1,1,0)!important;
}
.flex-fixed-2x {
  .flex(2,1,0)!important;
}
.flex-fixed-3x {
  .flex(3,1,0)!important;
}
.flex-fixed-4x {
  .flex(4,1,0)!important;
}
.flex-fixed-5x {
  .flex(5,1,0)!important;
}
.flex-fixed-7x {
  .flex(7,1,0)!important;
}
.gradient(@origin, @stops){
    background: -webkit-linear-gradient(@origin, @stops) no-repeat;
    background:    -moz-linear-gradient(@origin, @stops) no-repeat;
    background:    -ms-linear-gradient(@origin, @stops) no-repeat;
    background:      -o-linear-gradient(@origin, @stops) no-repeat;
    background:         linear-gradient(@origin, @stops) no-repeat;
}
.hidden  {
    display:none!important;
}
.hidden-fade {
    opacity:0!important;
}
.hover(@color, @multiplier: 0.8) {
    color: @color;
    &:hover {
      color: @color*@multiplier;
    }
}
.hover-bg(@color, @multiplier: 0.8) {
    background-color: @color;
    &:hover {
      background-color: @color*@multiplier;
    }
}
.scrollable {
    overflow-y:scroll!important;
}
.size(@width, @height: @width) {
    width: @width!important;
    height: @height!important;
}
.transition(@durationTime:@defaultDuration, @transitionType:ease-out, @transitionProperty:all) {
    transition: @transitionProperty @durationTime @transitionType;
    transition-duration: @durationTime;
}
.transform(@value) {
    -webkit-transform: @value;
    -moz-transform:    @value;
    -ms-transform:     @value;
    -o-transform:      @value;
    transform:         @value;
}
.unflex-container {
    display: initial;
}
